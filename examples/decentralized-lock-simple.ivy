#lang ivy1.5

type node
type time

relation le(X: time, Y: time)
axiom forall X : time . le(X, X)
axiom forall X : time . forall Y : time . le(X, Y) & le(Y, Z) -> le(X, Z)
axiom forall X : time . forall Y : time . (le(X, Y) & le(Y, X)) -> X = Y
axiom forall X : time . forall Y : time . le(X, Y) | le(Y, X)

relation has_lock(X: node)
relation msg(X: node, Y: node, E: time)
function epoch(X: node): time

#init (exists U . exists V . exists W . exists X . exists Y . exists Z .
#    ~le(U, V) & ~le(V, W) & ~le(W, X) & ~le(X, Y) & ~le(Y, Z))

#init (exists X . has_lock(X))
init ~(X ~= Y & has_lock(X) & has_lock(Y))
init ~msg(X,Y,T)
#init le(epoch(X), T)

action take_lock = {
  local x: node, y: node, t: time {
    assume msg(x, y, t);
    assume ~le(t, epoch(y));
    has_lock(y) := true;
    epoch(y) := t;
  }
}

action release_lock = {
  local x: node, y : node, t: time {
    assume has_lock(x);
    assume ~le(t, epoch(x));
    has_lock(x) := false;
    msg(x, y, t) := true;
  }
}

# safety property

#conjecture ~(X ~= Y & ( has_lock(X) | (msg(X1, X, T) & ~le(T, epoch(X))) ) & ( has_lock(Y) | (msg(Y1, Y, S) & ~le(S, epoch(Y))) ))
#conjecture ~(has_lock(X) & (msg(X1, X, T) & ~le(T, epoch(X))))
#conjecture ~(S ~= T & msg(X1, Y, S) & msg(X2, Y, T) & ~le(T, epoch(Y)) & ~le(S, epoch(Y)))

conjecture ~(X ~= Y & has_lock(X) & has_lock(Y))
#conjecture ~msg(B,B,epoch(B))

template forall A:node . forall B:node . forall C:node . forall E:time . forall F:time . WILD

#conjecture (exists Z . exists W . exists S .
#  (forall X . forall Y . forall T . ~has_lock(X) & ~msg(X, Y, T))
#| (forall X . forall Y . forall T . ((Z ~= X -> ~has_lock(X)) &
#    (~le(T, epoch(Y)) -> ~msg(X,Y,T))))
#| forall X . forall Y . forall T . (~has_lock(X) &
#    ((X ~= Z | Y ~= W | T ~= S) -> (~msg(X,Y,T) | le(T, epoch(Y)))))
#)
