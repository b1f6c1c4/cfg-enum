#lang ivy1.5

################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node

# epochs are totally ordered with a least element called zero
relation vote_yes(N: node)
relation vote_no(N: node)
relation alive(N: node)
relation go_commit(N: node)
relation go_abort(N: node)
relation decide_commit(N: node)
relation decide_abort(N: node)

individual abort_flag: bool

################################################################################
#
# Protocol description
#
################################################################################

init ~vote_yes(N)
init ~vote_no(N)
init alive(N)
init ~go_commit(N)
init ~go_abort(N)
init ~decide_commit(N)
init ~decide_abort(N)
init ~(abort_flag)

action vote1 = {
  local n: node {
    assume alive(n);
    assume ~vote_no(n);
    assume ~decide_commit(n);
    assume ~decide_abort(n);
    vote_yes(n) := true;
  }
}

action vote2 = {
  local n: node {
    assume alive(n);
    assume ~vote_yes(n);
    assume ~decide_commit(n);
    assume ~decide_abort(n);
    vote_no(n) := true;
    abort_flag := true;
    decide_abort(n) := true;
  }
}

action fail = {
  local n: node {
    assume alive(n);
    alive(n) := false;
    abort_flag := true;
  }
}

action go1 = {
  assume ~go_commit(N);
  assume ~go_abort(N);
  assume vote_yes(N);
  go_commit(N) := true;
}

action go2 = {
  assume ~go_commit(N);
  assume ~go_abort(N);
  assume exists N. vote_no(N) | ~alive(N);
  go_abort(N) := true;
}

action commit = {
  local n: node {
    assume alive(n);
    assume go_commit(n);
    decide_commit(n) := true;
  }
}

action abort = {
  local n: node {
    assume alive(n);
    assume go_abort(n);
    decide_abort(n) := true;
  }
}

export vote1
export vote2
export fail
export go1
export go2
export commit
export abort

template forall A: node, B: node . WILD

#conjecture abort_flag | alive(A)
#conjecture abort_flag | ~vote_no(A)
#conjecture go_abort(A) -> go_abort(B)
#conjecture decide_abort(A) | ~vote_no(A)
#conjecture go_commit(A) -> go_commit(B)
#conjecture decide_commit(A) -> go_commit(A)
#conjecture go_commit(A) -> ~go_abort(A)
#conjecture vote_yes(A) | ~go_commit(A)
#conjecture ~vote_yes(A) | ~vote_no(A)
#conjecture go_abort(A) -> abort_flag
#conjecture decide_abort(A) -> abort_flag

#conjecture decide_commit(N) -> go_commit(N)
#conjecture go_commit(N) -> ~go_abort(N2)
#conjecture decide_abort(N) -> go_abort(N)
#conjecture ~go_abort(N) -> ~decide_abort(N)

#conjecture abort_flag -> (exists N. vote_no(N) | ~alive(N))

# Generated from I4
conjecture ~((~(abort_flag) & go_abort(N0))) 
conjecture ~((~(abort_flag) & vote_no(N0))) 
conjecture ~((~(alive(N0)) & ~(abort_flag))) 
conjecture ~((~(go_abort(N0)) & decide_abort(N0) & vote_yes(N0))) 
conjecture ~((~(go_abort(N5)) & decide_abort(N5) & vote_yes(N5))) 
conjecture (N1 ~= N5) -> ~((~(go_abort(N5)) & go_abort(N1))) 
conjecture (N0 ~= N5) -> ~((~(go_commit(N5)) & decide_commit(N0))) 
conjecture ~((~(go_commit(N5)) & decide_commit(N5))) 
conjecture (N0 ~= N5) -> ~((~(go_commit(N5)) & go_commit(N0))) 
#conjecture (N4 ~= N5) -> ~((~(vote_yes(N4)) & go_commit(N5))) 
#conjecture ~((~(vote_yes(N5)) & go_commit(N5))) 
#conjecture (N0 ~= N5) -> ~((go_commit(N5) & go_abort(N0))) 
#conjecture ~((go_commit(N5) & go_abort(N5))) 

# the safety properties:
#conjecture (decide_commit(N) -> ~decide_abort(N2))
#conjecture (decide_commit(N) -> vote_yes(N2))
#conjecture (decide_abort(N) -> abort_flag)
