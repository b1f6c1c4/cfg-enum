#lang ivy1.3

# This file is modified from the learning.ivy example in the ivy repo.

################################################################################
#
# Module describing an acyclic partial function. The function is built by
# calling the "set" action. This has preconditions that enforce the required
# invariants. The function can be accessed using "dom" to query if an element is
# in the domain of the function, and "get" to get its value. The "get" action
# has a precondition that the given element must be in the domain. 
#
# Because of the invariant that the relation re construct by "set" is an acyclic
# partial function, we can represent it by its transitive closure "tc", while
# remainin gin EPR.
#
################################################################################

type packet
type host

# module inverse_forest(carrier) = {

relation dom(H:host,X:host)            # domain of the function
relation tc(H:host,X:host,Y:host)   # transitive closure of the function

axiom tc(H,X,X)                          # Reflexivity
axiom tc(H,X, Y) & tc(H,Y, Z) -> tc(H,X, Z)  # transitivity
axiom tc(H,X, Y) & tc(H,Y, X) -> X = Y     # anti-symmetry
axiom tc(H,X, Y) & tc(H,X, Z) -> (tc(H,Y, Z) | tc(H,Z, Y)) # linearity

init ~dom(H,X)
init (tc(H,X,Y) -> X = Y)     #initially empty
init (X = Y -> tc(H,X,Y))     #initially empty

#action set(h:host,x:host,y:host) = {
#   assert ~tc(H,y,x);                # can't create a cycle
#   assert ~dom(h,x);                 # can't remove links
#   dom(h,x) := true;              
#   tc(h,X, Y) := tc(h,X, Y) | tc(h,X, x) &  tc(h,y, Y)
#}

#action get(h:host,x:host) returns (y:host) = {
#   assert dom(h,x);
#   assume tc(h,x,y) & ~(tc(h,x,X) & tc(h,X,y) & X ~= x & X ~= y)
#}

# }

################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################


relation pending(P:packet, S:host, T:host) 
individual src(P:packet) : host
individual dst(P:packet) : host
relation link(S:host, T:host)

axiom ~link(X, X)                          # no self-loops
axiom ~link(X, Y) | link(Y, X)             # symmetric

# The initial state of the network (empty)

init ~pending(P,S,T)

################################################################################
#
# Protocol description
#
# There is just one action describing the receipt of a pending message
# by some host. 
#
################################################################################

action receive = {
  local p0:packet, sw0:host, sw1:host, sw2:host, s0:host, t0:host {

    ########################################
    # The action's guard. 

    assume t0 = dst(p0);
    assume s0 = src(p0);
    assume pending(p0, sw0, sw1) | s0 = sw1 & sw0 = sw1;

    ########################################
    # Abstract the number of times that the same packet recieved

    if (pending(p0,sw0, sw1)) {
        pending(p0, sw0, sw1) := *
    };

    ########################################
    # learn: if no route from receiving switch back to source...
    if (~dom(s0,sw1) & sw0 ~= sw1 & s0 ~= sw1) {
        #assert ~tc(sw0,sw1);              # (1) can't create a cycle
        #assert ~dom(sw1);                 # (2) can't remove links
        dom(s0,sw1) := true;              
        tc(s0,X, Y) := tc(s0,X, Y) | tc(s0,X, sw1) &  tc(s0,sw0, Y)
    };

    ########################################
    # forward the packet if dest is not self
    if t0 ~= sw1 {

      if ~dom(t0,sw1) {                            # if no route to dest...
        pending(p0, sw1, Y) := link(sw1, Y) & Y ~= sw0  # flood
      }
      else {
        #assert dom(sw1);                 # (3)
        assume tc(t0,sw1,sw2) & ~(tc(t0,sw1,X) & tc(t0,X,sw2) & X ~= sw1 & X ~= sw2);

        pending(p0, sw1, sw2) := true                   # route the packet there
      }
    }
  }
}

#conjecture ~(dom(S,V0) & ~tc(S, V0, S))
#conjecture ~dom(V0,V0)
#conjecture ~(pending(P, V0, V1) & dst(P) = V0)
#conjecture ~(pending(P, V0, V1) & ~dom(src(P),V0) & V0 ~= src(P))
#conjecture ~(tc(S, V0, V1) & ~V0 = V1 & ~dom(S, V0))
#conjecture ~(tc(S, V0, V1) & ~V0 = V1 & S ~= V1 & ~dom(S, V1)) # TODO: needed?
#conjecture ~(~V0 = S & tc(S, S, V0))

# SAFETY CONDITION
# This corresponds to commented assert (1) above
conjecture ((pending(P0, SW0, SW1) | S0 = SW1 & SW0 = SW1) & (~dom(S0,SW1) & SW0 ~= SW1 & S0 ~= SW1)) -> ~tc(S0,SW0,SW1)

template forall A001:host. forall A002:host. forall A003:host. forall A004:host. WILD
template exists A001:host. exists A002:host. exists A003:host. exists A004:host. WILD
template forall A001:packet. forall A002:host. forall A003:host. forall A004:host. WILD
template forall A001:packet. exists A002:host. exists A003:host. exists A004:host. WILD
template exists A001:packet. forall A002:host. forall A003:host. forall A004:host. WILD
template exists A001:packet. exists A002:host. exists A003:host. exists A004:host. WILD
template forall A001:packet. forall A002:packet. forall A003:host. forall A004:host. WILD
template forall A001:packet. forall A002:packet. exists A003:host. exists A004:host. WILD
template exists A001:packet. exists A002:packet. forall A003:host. forall A004:host. WILD
template exists A001:packet. exists A002:packet. exists A003:host. exists A004:host. WILD
template forall A001:packet. forall A002:packet. forall A003:packet. forall A004:host. WILD
template forall A001:packet. forall A002:packet. forall A003:packet. exists A004:host. WILD
template exists A001:packet. exists A002:packet. exists A003:packet. forall A004:host. WILD
template exists A001:packet. exists A002:packet. exists A003:packet. exists A004:host. WILD
template forall A001:packet. forall A002:packet. forall A003:packet. forall A004:packet. WILD
template exists A001:packet. exists A002:packet. exists A003:packet. exists A004:packet. WILD
