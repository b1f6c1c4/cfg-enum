#lang ivy1.5

type client
type server

relation link(X:client, Y:server)
relation semaphore(X:server)

init semaphore(W)
init ~link(X,Y)

action connect = {
 local x:client, y:server {
    assume semaphore(y);
    link(x,y) := true;
    semaphore(y) := false
  }
}

action disconnect = {
  local x:client, y:server {
    assume link(x,y);
    link(x,y) := false;
    semaphore(y) := true
  }
}


# safety condition:
conjecture link(C1, S) & link(C2, S) -> C1 = C2

template forall A001:server. forall A002:server. forall A003:server. forall A004:server. WILD
template exists A001:server. exists A002:server. exists A003:server. exists A004:server. WILD
template forall A001:client. forall A002:server. forall A003:server. forall A004:server. WILD
template forall A001:client. exists A002:server. exists A003:server. exists A004:server. WILD
template exists A001:client. forall A002:server. forall A003:server. forall A004:server. WILD
template exists A001:client. exists A002:server. exists A003:server. exists A004:server. WILD
template forall A001:client. forall A002:client. forall A003:server. forall A004:server. WILD
template forall A001:client. forall A002:client. exists A003:server. exists A004:server. WILD
template exists A001:client. exists A002:client. forall A003:server. forall A004:server. WILD
template exists A001:client. exists A002:client. exists A003:server. exists A004:server. WILD
template forall A001:client. forall A002:client. forall A003:client. forall A004:server. WILD
template forall A001:client. forall A002:client. forall A003:client. exists A004:server. WILD
template exists A001:client. exists A002:client. exists A003:client. forall A004:server. WILD
template exists A001:client. exists A002:client. exists A003:client. exists A004:server. WILD
template forall A001:client. forall A002:client. forall A003:client. forall A004:client. WILD
template exists A001:client. exists A002:client. exists A003:client. exists A004:client. WILD
