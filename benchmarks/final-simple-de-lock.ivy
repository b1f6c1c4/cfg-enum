#lang ivy1.5

type node

relation message(Src: node, Dst: node)
relation has_lock(N: node)

individual start_node: node

init forall Src, Dst . ~message(Src, Dst)
init has_lock(start_node)
init N ~= start_node -> ~has_lock(N)

action send = {
  local src: node, dst: node {
    assume has_lock(src);
    message(src, dst) := true;
    has_lock(src) := false;
  }
}

action recv = {
  local src: node, dst: node {
    assume message(src, dst);
    message(src, dst) := false;
    has_lock(dst) := true;
  }
}

conjecture X ~= Y -> ~(has_lock(X) & has_lock(Y))

template forall A001:node. forall A002:node. forall A003:node. forall A004:node. WILD
template exists A001:node. exists A002:node. exists A003:node. exists A004:node. WILD
